{"version":3,"sources":["components/InstanceList.js","components/Instance.js","App.js","serviceWorker.js","index.js"],"names":["InstanceList","id","e","this","props","selectInstance","_this","react_default","a","createElement","class","title","items","map","item","key","instanceId","name","type","onClick","React","Component","Instance","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","raiseExernalEventApproved","bind","assertThisInitialized","raiseExernalEventNotApproved","eventRaisedHandler","customStatus","disabled","value","createdTime","lastUpdatedTime","runtimeStatus","JSON","stringify","input","historyEvents","REACT_APP_API_URL","FUNCTION_APP_KEY","InstanceManagerApp","state","poster","text","error","isLoaded","selected","handlePosterChange","handleTextChange","handleSubmit","handleSelectInstance","handleEventRasied","_this$state","handleRaiseExernalEvent","message","className","onSubmit","htmlFor","onChange","components_InstanceList","filter","components_Instance","approved","instance","updatedSelected","axios","post","status","then","response","setState","console","log","catch","param","_this2","fetch","res","json","result","target","preventDefault","length","newInstnace","self","data","concat","_this3","process","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56cc749e.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\n\r\n\r\n\r\nclass InstanceList extends React.Component {\r\n\r\n\r\n\r\n  selectInstance(id, e) {\r\n    this.props.selectInstance(id);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <article class=\"card\">\r\n        <header>\r\n          <h3>{this.props.title}</h3>\r\n        </header>\r\n        <footer>\r\n          {this.props.items.map(item => (\r\n            <label key={item.instanceId} class=\"stack\">\r\n              <input name=\"stack\" type=\"radio\" onClick={() => this.selectInstance(item.instanceId)} />\r\n              <span class=\"button toggle\" >\r\n                <span class=\"icon-file-code\"></span>  {item.instanceId}\r\n              </span>\r\n            </label>\r\n          ))}\r\n        </footer>\r\n      </article>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport default InstanceList;\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport React from 'react';\r\n\r\n\r\n\r\n\r\nclass Instance extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.raiseExernalEventApproved = this.raiseExernalEventApproved.bind(this);\r\n        this.raiseExernalEventNotApproved = this.raiseExernalEventNotApproved.bind(this);\r\n\r\n    }\r\n\r\n    raiseExernalEventApproved() {\r\n        this.props.eventRaisedHandler(2);\r\n    }\r\n\r\n    raiseExernalEventNotApproved() {\r\n        this.props.eventRaisedHandler(3);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <article class=\"card instance-deatils\">\r\n                    <header>\r\n                        <h3>{this.props.item.instanceId}</h3>\r\n                    </header>\r\n                    {this.props.item.customStatus === 'WaitingForManualReviewCompleted' &&\r\n                        <form>\r\n                            <button onClick={this.raiseExernalEventApproved}>\r\n                                Approve message\r\n                    </button>\r\n                            <button onClick={this.raiseExernalEventNotApproved}>\r\n                                Reject message\r\n                    </button>\r\n\r\n                        </form>\r\n                    }\r\n\r\n\r\n\r\n                    <fieldset class=\"flex one\">\r\n\r\n                    \r\n                        <label><h4>InstanceId</h4> <input\r\n                            id=\"InstanceId\"\r\n                            disabled=\"true\"\r\n                            value={this.props.item.instanceId}\r\n                        />  </label>\r\n\r\n                        <label><h4>Created time</h4><input\r\n                            id=\"createdTime\"\r\n                            disabled=\"true\"\r\n                            value={this.props.item.createdTime}\r\n                        />  </label>\r\n\r\n                        <label><h4>Last updated time</h4> <input\r\n                            id=\"lastUpdatedTime\"\r\n                            disabled=\"true\"\r\n                            value={this.props.item.lastUpdatedTime}\r\n                        />  </label>\r\n\r\n                        <label><h4>Run time status</h4> <input\r\n                            id=\"runtimestatus\"\r\n                            disabled=\"true\"\r\n                            value={this.props.item.runtimeStatus}\r\n                        />  </label>\r\n\r\n\r\n                        <label><h4>Custom status</h4><input\r\n                            id=\"runtimestatus\"\r\n                            disabled=\"true\"\r\n                            value={this.props.item.customStatus}\r\n                        />  </label>\r\n\r\n\r\n                        <label><h4>Workflow input</h4><textarea\r\n                            id=\"worflowInput\"\r\n                            disabled=\"true\"\r\n                            value={JSON.stringify(this.props.item.input)}\r\n                        />  </label>\r\n\r\n                        <label><h4>Event history</h4>  <textarea\r\n                            id=\"eventHistroy\"\r\n                            disabled=\"true\"\r\n                            value={JSON.stringify(this.props.item.historyEvents)}\r\n                        />  </label>\r\n\r\n                    </fieldset>\r\n\r\n                </article>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Instance;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport InstanceList from './components/InstanceList'\nimport Instance from './components/Instance'\nimport './App.css';\n\nconst REACT_APP_API_URL=\"https://tweetcheckerworkflow.azurewebsites.net\";\nconst FUNCTION_APP_KEY = \"wqxSZcmLwgaUzXnlZCNwgNN87hH2Syb8H3KFvHev0lDQ9bnYhrb4aw==\"\n\n\nclass InstanceManagerApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [], poster: '', text: '', error: null,\n      isLoaded: false, selected: null\n    };\n    this.handlePosterChange = this.handlePosterChange.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSelectInstance = this.handleSelectInstance.bind(this);\n    this.handleEventRasied = this.handleEventRasied.bind(this);\n  }\n\n  render() {\n\n    const { error, isLoaded, items, selected, handleSelectInstance, handleRaiseExernalEvent } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"App\">\n          <div className=\"flex four\">\n         \n            <div>\n              <article class=\"card\">\n                <header>\n                  <h3>Start new workflow</h3>\n                </header>\n                <footer>\n\n                  <form onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"poster\">\n                      Created by\n                </label>\n\n                    <input\n                      id=\"poster\"\n                      onChange={this.handlePosterChange}\n                      value={this.state.poster}\n                    />\n                    <label htmlFor=\"message\">\n                      Message\n                </label>\n\n                    <input\n                      id=\"message\"\n                      onChange={this.handleTextChange}\n                      value={this.state.text}\n                    />\n                    <button>\n                      Create new instance\n                   </button>\n                  </form>\n                </footer>\n              </article>\n              <InstanceList items={items.filter(item => item.runtimeStatus === \"Running\")} title=\"Running workflows\" selectInstance={this.handleSelectInstance}></InstanceList>\n              <InstanceList items={items.filter(item => item.runtimeStatus !== \"Running\")} title=\"Completed workflows\" selectInstance={this.handleSelectInstance}></InstanceList>\n            </div>\n            <div class=\"two-third\">\n              {selected != null &&\n                <Instance item={selected} eventRaisedHandler={this.handleEventRasied}></Instance>\n              }\n            </div>\n          </div>\n\n\n\n\n\n\n        </div>\n      );\n\n    }\n  }\n\n  handleEventRasied(approved) {\n\n    var instance = this.state.selected.instanceId + \"/raiseEvent/ManualReviewCompleted\";\n    var updatedSelected = this.state.selected;\n\n    updatedSelected.customStatus = \"\";\n    axios.post(REACT_APP_API_URL+'/runtime/webhooks/durabletask/instances/' + instance + \"?code=\" + FUNCTION_APP_KEY, { 'status': approved })\n      .then(function (response) {\n\n        this.setState({\n          selected: updatedSelected\n        });\n\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n\n\n  handleSelectInstance(param, e) {\n\n    fetch(REACT_APP_API_URL+\"/runtime/webhooks/durabletask/instances/\" + param + \"?showHistory=true&customStatus&code=\" + FUNCTION_APP_KEY)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            selected: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n\n  }\n\n  handleTextChange(e) {\n\n\n    this.setState({ text: e.target.value });\n  }\n\n\n  handlePosterChange(e) {\n\n\n    this.setState({ poster: e.target.value });\n  }\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.text.length) {\n      return;\n    }\n    const newInstnace = {\n      text: this.state.text,\n      poster: this.state.poster,\n      runtimeStatus : \"Running\"\n    };\n\n    var self = this;\n    axios.post(REACT_APP_API_URL+'/api/function_HttpStart', newInstnace)\n      .then(function (response) {\n        newInstnace.instanceId = response.data.id\n        self.setState(state => ({\n          items: state.items.concat(newInstnace),\n          text: '',\n          poster: ''\n        }));\n        \n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n\n\n  }\n\n\n\n\n  componentDidMount() {\n\n    console.log(process.env);\n    fetch(REACT_APP_API_URL+\"/runtime/webhooks/durabletask/instances?code=\" + FUNCTION_APP_KEY)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n\n\n}\n\nexport default InstanceManagerApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}